<div class="row">
	<div class="col-sm-1 col-md-2"></div>
	<div class="col-sm-10 col-md-8 col-xs-12">
		<header>
			<img src="http://www.necolt.com/assets/technologies/ruby-5f063c0de539ec15ee4f91192bdb0897.png" class="img-rounded img-responsive logo">
			<h1> Ruby -- Giving it life</h1>
			<h2> Crash Course Part 4 </h2>
	 		<h2><i class="fa fa-paperclip"></i> Ruby, RVM, Sinatra, RESTful, API, RubyGEMS, ActiveRecord, ORM, ERB, Slim, Heroku, POSTGRESQL, SQLite3</h3>
 		</header>
 		<div class="meat">
 			<ul>
 				<li>Dynamic Sites</li>
				<li>What is Ruby</li>
 				<li>Installation</li>
 				<li>Basics of Routes</li>
 				<li>ERB - Dynamic Pages</li>
 				<li>Hosting</li>
 				<li>Databases</li>
 			</ul>
 			<h2> Dynamic Sites </h2>
			<p> Now you have learned how to build static website pages with Html, CSS and Javascript. However, those three technologies can only get you so far. You need to be able to build websites based upon user submittions like Wiki Articles and Facebook Posts. The secret to that is databases. Now database querying can get very complicated and tedious especially as your site grows larger and larger. To help ease this developers have built APIs that Objective this and remove the need to understand Relational Algebra. These concepts are known as Persistence and Object Relation Modeling(ORM). </p>
			<p> There are many options to build a persistance ORM (JavaEE, Python-Flask, C# .NET, etc). In this tutoerial we will be using Ruby-Sinatra. </p>
			<h2> What is Ruby?</h2>
 			<p> Ruby is an Objected Orientated Programming language like Java but it is closer to Python than the C family. So for those of you who know Python this won't be too foreign. Ruby's goal is to be a langauge that is easy to write and easy to read without sacrificing functionality. As a result, it is an incrediblely expressive language with some unique functionality. It can complete taskes in a single line that other languages may take 5. This makes it great for a backend programming language. </p>

 			<h2> Installing Ruby </h2>
 			<!-- Nav tabs -->
			<ul class="nav nav-tabs" role="tablist">
			  <li class="active"><a href="#Linux" role="tab" data-toggle="tab">Linux</a></li>
			  <li><a href="#Mac" role="tab" data-toggle="tab">Mac</a></li>
			  <li><a href="#Windows" role="tab" data-toggle="tab">Windows</a></li>
			</ul>

			<!-- Tab panes -->
			<div class="tab-content">
			  <div class="tab-pane active" id="Linux">
			  	<p> Ubuntu should have ruby installed by default however, it tends to be an older version like 1.8.7.Also, its very important to have Ruby Version Manager installed. It will help with gem dependencies and easily allow you to switch to different versions of ruby in the future. So first run this</p>
			  	<pre><code  class="language-bash">ruby --version</code></pre>
			  	<p> If it doesn't return a valid answer run this</p>
			  	<pre><code  class="language-bash">sudo apt-get install ruby</code></pre>
			  	<p> Then: </p>
				<pre><code  class="language-bash">\curl -sSL https://get.rvm.io | bash</code></pre>
				<p> Now lets make sure rvm is workking. </p>
				<pre><code  class="language-bash">rvm install 2.1
rvm use 2.1</code></pre>
				<p> Finally setup Ruby Gems</p>
				<pre><code  class="language-bash">rvm rubygems current</code></pre>
			  </div>
			  <div class="tab-pane" id="Mac">
			  	<p> Ruby is built into all modern Macs however it tends to have an old version like 1.8.3 and 2.0.0. So we should just install Ruby Version Manager just to be safe.</p>
			  	<pre><code  class="language-bash">\curl -sSL https://get.rvm.io | bash</code></pre>
			  	<p> Then run </p>
				<pre><code  class="language-bash">rvm install 2.1
rvm use 2.1</code></pre>
				<p> Finally setup Ruby Gems</p>
				<pre><code  class="language-bash">rvm rubygems current</code></pre>
			  </div>
			  <div class="tab-pane" id="Windows">For windows, just install Rails installer its an easy single packaged bundle which install ruby for you. <a href="http://railsinstaller.org/en">LINK</a>
					<p>This .exe file will install Git, Ruby 1.9,  </p>
				</div>
			</div>

			<h2> Getting Sinatra singing </h2>
			<p> While Rails is the most popular framework to build websites with Ruby; I thought it would be a good idea to introduce you to something a little less complicated. Rails as a lot of parts and tries to do everything. Rails was the first major web framework for Ruby so it had to build all of its own solutions in the mid 2000s. However after almost ten years there are a lot of other alternatives in the Ruby world. One of which is the scrappy, barebones but flexible Sinatra. I think it will be better for our educational purpsoes. If you are interested in learning more about Rails(as it is a high in demand web framework) I recommended following <a href="http://andreapavoni.com/blog/2013/8/a-rails-4-tutorial-application-for-beginners/#.VAU6e1bobx4">this tutorial</a> to get yourself started. Then check out <a href="http://codeschool.com/">Code School's </a> and <a href="http://http://railscasts.com">Rails Casts'</a> tutorials to get more depth. Now Lets build a simple hello world sinatra</p>
			<p> First things first</p>
			<pre><code  class="language-bash">gem install sinatra</code></pre>
			<p> Rubygems will install the latest version of sinatra available to your version of Ruby</p>
			<p> Next put the following into a new blank file named app.rb</p>
			<pre><code  class="language-ruby">require "sinatra"
get "/" do
	'Hello World'
end</code></pre>
			<p> Now just run</p>
			<pre><code  class="language-bash">ruby app.rb</code></pre>
			<p> This should build a simple sinatra webserver on your computer on port 4567. To check it out, open your webbrowser to a new tab and type in http://localhost:4567/ <a href="http://localhost:4567">link</a>. You should be greated with a frendly 'hello world'</p>

			<h2> Routing </h2>
			<p> So in this application we are building a route for "/". Routes are how we communicate to the web app to deteremine what different web page to go to. Its a http request from your browser to the server; It includes a HTTP Method and a URL Route. There are quite a few HTTP methods but the 2 most important are GET and POST. GET is used to recieve data so generally use it for a pages and data requests. POST on the other hand is used for submissions and editing. So use POST for form submissions and any other time you are changing backend data. Becoming familiar with GET and POST will help you with any future backend technology you use.  </p>

			<p> So lets write our next route. Add this to the bottom of app.rb </p>
			<pre><code  class="language-ruby">get "/test" do
	"This is a test"
end</code></pre>
			<a href="http:/localhost:4567/test">Go to http://localhost:4567/test</a>
			<p> Now lets add some POST form magic and dabble in a little App Server data manipulation magic. Add this to the bottom of app.rb </p>
			<pre><code  class="language-ruby">get "/form" do
	puts "GET"
	<%= h '\'<h3>Data:</h3>
	<form action="/form">
		<input type="text" name="data">
		<input type="submit" value="submit">
	</form>\'' %>
end
post "/form" do
	puts "POST"
	puts params.inspect
	<%= h '\'<h3>Data: \'+params[:data]+\' </h3>
	<form action="/form">
		<input type="text" name="data">
		<input type="submit" value="submit">
	</form>\'' %>
end</code></pre>
		<p> Did you check out? If you are still confused by the routing then <a href="http://localhost:4567/form"> go to http://localhost:4567/form. </a> Now lets explain what is going on</p>
		<p> We are building two routes. The inital one without data and the second one which post the form submission and has dynamic data being injected. This is accomplished with the PARMAS method. Params is short for Parameters. They are the parameters in the HTTP Request method. In our snippet the parameter :data is being embedded by the form in an input field. What ever you put into that input field the browser will embedded as the value for :data. Then when sinatra recieves that http request it will have a hash to :datas value using params[:data].</p>

		<p> IF you look at your app.rb routes now...you might notice something a little off. Why are your route methods returning these HUGE Strings</p>
		<p> You must be wondering if there is an easier way to manage your html/css. There is using erb. Erb is just short for Embed RuBy. It allows you to add ruby logic and variables directly into your html</p>
		<h3> ERB </h3>
		<p> To get started using ERB lets make a new folder called 'views' and inside of it make a new file called 'form.erb'. Now fill it with the following</p>
		<%# I couldn't add the erb tag without throwing an error so i found this work around, It know its not pretty but....what can you do%>
		<pre><code class="language-markup">

<%= h '<h3>Data: '%><%%= @data %><%= h '</h3>
<form action="/form">
  <input type="text" name="data">
  <input type="submit" value="submit">
</form>'%>
	</code></pre>
		<p> <%%= variable %> </p>
		<p> Next replace your old routes with these new routes </p>
		<pre><code class="language-ruby">get "/form" do
	puts "GET"
  @data = ""
	erb :form
end
post "/form" do
	puts "POST"
	puts params.inspect
  @data = params[:data]
	erb :form
end</code></pre>
		<p> The erb file will search out a file with that name (file in this case) in views and print it out.</p>
		<p> Oh another new thing is the use of the @data variable. This is a local variable for this route return. It allows you to insert data into the html. The @ is the same as self. but ruby has a short hand symbol for that since its used so often. self == this (for those from a java background)</p>
		<p> In erb there is a new special tag . It is the ruby tag, here you can insert ruby logic directly into your html -- Conditions, for loops, the works. Also if you add = it will also print it out as we are in this case with the @data variable</p>
		<p> Much clearer don't you agree? </p>
		<p> Now this is good and dandy for now but we want to have a true persisting backend. </p>
		<p> To implement this we will need to setup a database server to save our data as well as establish an ORM.</p>
		<p> In this tutorial we will be using SQLite3 as our database and Sinatra-ActiveRecord as our ORM. I choose these two because SQLite3 is the easiest to install as it requires no additional software or plugins than just the gem. Sinatra-Activerecord is a port of Rails Activerecord ORM and DB migration system. There are other options out there but I feel Activerecord is the clearest and most useful to learn.</p>
		<p> To make your life easier I have built a little git repo for you to start </p>
		<!-- Insert Git Repo here-->
		<p> If you don't understand how to use Git feel free to look at <a href="/tut0">Tutorial 0</a>. However, for the lazy and uninterested you can simply download the repo as a .zip. </p>
		<p> In the repo you will find a couple different files [app.rb, config.ru, Gemfile, Rakefile] and folders [db, views, public]</p>
		<p> I will now explain the purpose of each one and tell you what to add in each</p>
		<p> First lets talk about the Gemfile. The Gemfile as you probably could have guessed is used to maintain Gem dependencies. Here you can declare what version a gem should be and where the source is. This helps alot when working with a team as everyone's computers may be on different OSes and have different version of gem X installed. Gemfiles just make this whole process a lot easier. Now insert the following into Gemfile </p>
		<pre><code class="language-ruby">
<%= h "source 'https://rubygems.org'
gem 'sinatra'
gem 'activerecord'
gem 'sinatra-activerecord'
gem 'rake'
gem 'sqlite3'" %>
		</code></pre>
		<p> Awesome now in the terminal run </p>
		<pre><code class="language-bash"> bundle install </code></pre>
		<p> Bundler will run through your gem file and make sure the appropiate gem libraries are installed.</p>
		<p> Next thing we need to set up is the Rakefile. Rake is a middleware for Ruby like what ANT and Maven is to Java. For those unclear, a simple way to understand Middlewares is that they are what handles the transactions between libraries. They are the middle men or diplomats as it were.</p>
		<pre><code class="language-ruby"> <%= h "require './app'
require 'sinatra/activerecord/rake'"
		%></code></pre>
		<p> Thats it, we are just telling Rake to import app.rb and all the commands from sinatra-activerecord</p>
		<p> To test that it worked run Rake -T in the console. It should spit out a lot of options</p>
		<p> Now that we have Rake setup, we can build the database. Activerecord relies upon a concept called migrations. Migrations are useful because it allows you to modify preexisting SQL databases without having to completely destroy them. Also it just makes the managing them between different developers much easier.</p>
		<p> First off type this into the terminal </p>
		<pre><code class="language-bash">
rake db:create_migration NAME=users
		</code></pre>
		<p> Now this will generate a migration file in the folder db/migrations. Open that newly created file with your favorite text editor and make sure it looks like the following </p>
		<pre><code class="language-ruby">
<%= h	'def change
	create_table :users do |t|
		t.string :username
		t.string :email
		t.string :password_salt
		t.string :password_hash
	end
end' %>
		</code></pre>
		<p> So here we are defining the change method. Its what is the migration calles when we are migrating or rolling back. In this case we are creating a new table called users with the following 4 strings.</p>
		<ul>
			<li> username </li>
			<li> email </li>
			<li> password_salt</li>
			<li> password_hash</li>
		</ul>
		<p> The strings holding a user's email and username should be self explainatory but you might be confused by salt and hash. This so we can apply a little encryption to our users passwords. Things like Passwords and Bankaccounts should never be saved as raw strings because if your database is ever compromised then you've just leaked all of this private sensitive data. Instead you should always apply some form of encrypt to them. In this tutorial we will be using BCrypt which uses a hash and salt encryption. We will use these two variables to retrieve the users true password.</p>
		<p> One little note: You might be confused by the lack of an id column. This is because Activerecord builds on automatically. However if you are interested in using a different primary key or use a none integer based key system then you can check out the Activerecord documentation. I know they support these functionality but I don't intend to introduce it in this tutorial as it is unnecessary and will only confuse true beginners to web development and database management. </p>
		<p> Now to build this table we run this command in our terminal </p>
		<pre><code class="language-bash"> rake db:migrate </code></pre>
		<p> If things work correctly you should be greeted with a print out that says the table users was created</p>
		<p> Next up we need to build a way for our users to signup and log in</p>
		<p> So first go back to your Gemfile and add </p>
		<pre><code class="language-ruby"> gem 'bcrypt' </code></pre>
		<p> and run bundle install. Now lets build ourselves a log in/sign up page </p>
		<p> Next go to app.rb and add the following four routes</p>
		<pre><code></code></pre>
	 	<p> Now test it to make sure it works. Sign up and go to the greetings page and sign out and try logging in. Did you make it to the same greetings page?</p>
		<p> Awesome now we can move onto the next thing. I've decided that today we are going to make something along the lines of Reddit but ours will have gifs to make it more interesting.</p>
		<p> So to build such an application we will need Users(check), Posts and Comments. Posts will be the root thread with an initial comment and author. Comment will then hold a reference to a parent comment as well as author(user reference), datamessage(string) and a gif_url(string).</p>
		<p> Now lets build a new migration to add the 2 new tables </p>
		</div>
 	</div>
 	<div class="col-sm-1 col-md-2"></div>
 </div>
